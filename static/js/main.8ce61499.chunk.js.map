{"version":3,"sources":["logo.svg","components/ImagesList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImagesList","_ref","images","shuffle","react_default","a","createElement","className","map","image","i","key","src","thumb","alt","onClick","bind","App","state","score","getImages","axios","get","params","count","headers","Authorization","concat","array","_this","clicked","alert","setState","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","that","this","then","data","res","push","urls","logo","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qRCGzB,SAASC,EAATC,GAAwC,IAAlBC,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,QAC3C,OACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAY,cAEhBL,EAAOM,IAAI,SAACC,EAAOC,GAAR,OACVN,EAAAC,EAAAC,cAAA,MAAIK,IAAOD,GACZN,EAAAC,EAAAC,cAAA,OAAKM,IAAOH,EAAMI,MAAOC,IAAM,WAAWC,QAAWZ,EAAQa,KAAK,KAAMN,aCwE5DO,6MA1EbC,MAAQ,CACNhB,OAAQ,GACRiB,MAAO,KAGTC,UAAY,WAGV,OAAOC,IAAMC,IADG,yCACY,CAAEC,OAAQ,CAAEC,MAAM,IAAMC,QAAS,CAAEC,cAAa,aAAAC,OAF7D,0EAKjBxB,QAAU,SAACO,GACR,IAAIkB,EAAQC,EAAKX,MAAMhB,QACC,IAArB0B,EAAMlB,GAAGoB,SACVC,MAAM,wCAAyCF,EAAKX,MAAMC,OAC1DU,EAAKG,SAAS,CAACb,MAAM,MAErBS,EAAMlB,GAAGoB,SAAU,EACnBD,EAAKG,SAAS,CAACb,MAAQU,EAAKX,MAAMC,MAAM,KAK3C,IAHC,IAAiCc,EAAgBC,EAA7CC,EAAeP,EAAMQ,OAGnB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBL,EAHjBO,GAAgB,GAIhBP,EAAMO,GAAgBP,EAAMM,GAC5BN,EAAMM,GAAeD,EAGvBJ,EAAKG,SAAS,CAAC9B,OAAO0B,wFAItB,IAAIY,EAAOC,KACAA,KAAKrB,YAAYsB,KAAK,SAASC,GAExC,IADF,IAAIC,EAAM,GACAlC,EAAI,EAAGA,EAAIiC,EAAKA,KAAKP,OAAQ1B,IACnCkC,EAAIC,KAAK,CAAChC,MAAM8B,EAAKA,KAAKjC,GAAGoC,KAAKjC,MAAOiB,SAAQ,IAGnD,OADAU,EAAKR,SAAS,CAAC9B,OAAO0C,IACfA,qCAMT,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKM,IAAKmC,IAAMxC,UAAU,WAAWO,IAAI,SACzCV,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVyC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA9C,EAAAC,EAAAC,cAACN,EAAD,CAAYE,OAAUuC,KAAKvB,MAAMhB,OAAQC,QAAWsC,KAAKtC,mBApEjDgD,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.8ce61499.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n// Destructuring the type, className, children and onClick props, applying them to the button element\r\nexport default function ImagesList({ images, shuffle }){\r\n  return(\r\n  \t<ul className = \"ImagesList\">\r\n  \t{\r\n\t  images.map((image, i)=>(\r\n\t  \t<li key = {i}>\r\n\t\t\t<img src = {image.thumb} alt = \"alt text\" onClick = {shuffle.bind(null, i)} />\r\n\t  \t</li>\r\n\t  ))\r\n\t}\r\n  \t</ul>\r\n  )\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport ImagesList from './components/ImagesList';\n\nclass App extends Component {\n  state = {\n    images: [],\n    score: 0\n  }\n  \n  getImages = () => {\n    var appToken = \"5ca4cc46736d8daf4d46c8b4135d7bbab09ef7b026934d46a647e0d593eedab6\";\n    var imagesUrl = \"https://api.unsplash.com/photos/random\"\n    return axios.get(imagesUrl, { params: { count:10 }, headers: { Authorization: `Client-ID ${appToken}` } });\n  }\n\n  shuffle = (i) => {\n     var array = this.state.images;\n     if(array[i].clicked === true){\n       alert(\"Already clicked! Your High Score is: \"+ this.state.score);\n       this.setState({score:0})\n     }else{\n       array[i].clicked = true;\n       this.setState({score: (this.state.score+1)})\n     }\n     var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({images:array})\n  }\n\n  componentDidMount(){\n    var that = this;\n    var imgs = this.getImages().then(function(data){\n    var res = [];\n      for(let i = 0; i < data.data.length; i++){\n        res.push({thumb:data.data[i].urls.thumb, clicked:false})\n      }\n      that.setState({images:res})\n      return res;\n    });\n//    this.setState({images:});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <ImagesList images = {this.state.images} shuffle = {this.shuffle}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}